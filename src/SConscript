# -*- python -*-

import os

from subprocess import check_output

Import('env build_dir')

# Create versioning hashes
def create_hash_dict(target, source, env):
    env['SUBST_DICT'] =  {
        '@GIT_HASH@' : check_output(['git', 'rev-parse', 'HEAD']).strip(),
        '@GIT_HASH_SHORT@' : check_output(['git', 'rev-parse', 'HEAD']).strip()[:6],
        '@ILA_JS@' : check_output(['git', 'hash-object',
                                   build_dir('js/ila.js')]).strip()[:6],
        '@ILA_CSS@' : check_output(['git', 'hash-object',
                                    build_dir('css/ila.css')]).strip()[:6],
        '@COVER_JS@' : check_output(['git', 'hash-object',
                                     build_dir('js/cover.js')]).strip()[:6],
    }

git_hash_xsl = env.Substfile('xsl/git-hash.xsl.in')
git_hash_depends = ['$BUILD_DIR/js/ila.js',
                    '$BUILD_DIR/css/ila.css',
                    '$BUILD_DIR/js/cover.js']
env.Depends(git_hash_xsl, git_hash_depends)
env.AddPreAction(git_hash_xsl, create_hash_dict)

theme_xsl = env.Command('xsl/theme.xsl', 'xsl/theme-${THEME}.xsl',
                        Copy('$TARGET', '$SOURCE'))

# Create output html files
xml_sources = Glob('*.xml') + Glob('figure-images/*') + Glob('latex/*') \
    + [theme_xsl, git_hash_xsl, 'xsl/mathbook-html.xsl', 'xsl/mathbook-latex.xsl']

env['PDF_FILE'] = 'ila.pdf'

env['OUTPUT_HTML'] = os.path.join(env['CACHE_DIR'], 'output-html')
output_html = \
    env.Command('$OUTPUT_HTML/index.html',
                ['xsl/mathbook-html.xsl', 'ila.xml'],
                Action('xsltproc -o $OUTPUT_HTML/ --xinclude' \
                       '    --stringparam pdf.online $PDF_FILE $SOURCES',
                       'Generating html files...'))
env.Depends(output_html, xml_sources)
env.AddPreAction(output_html,
                 Action('xmllint --xinclude --noout'
                        '    --relaxng $BASE_DIR/mathbook/build/pretext.rng'
                        '    $BASE_DIR/src/ila.xml',
                        'Verifying xml...'))
if env['SCRATCH']:
    env.AddPreAction(output_html, ['rm -rf $OUTPUT_HTML', 'mkdir $OUTPUT_HTML'])

# Now run pretex
env['PREAMBLE'] = '$OUTPUT_HTML/preamble.tex'
env['PRETEX_CACHE'] = '$CACHE_DIR/pretex-cache'
env['PRETEX_STYLE'] = '$BASE_DIR/src/latex'
env['PRETEX_IMGS'] = '$BASE_DIR/src/figure-images'
pretex = \
    env.Command('$BUILD_DIR/index.html',
                output_html,
                Action('python3 '\
                       '$PRETEX --chunk-size $CHUNKSIZE' \
                       '        --preamble   $PREAMBLE' \
                       '        --cache-dir  $PRETEX_CACHE' \
                       '        --style-path $PRETEX_STYLE' \
                       '        --img-dir    $PRETEX_IMGS' \
                       '        --output-dir $OUTPUT_HTML' \
                       '        --build-dir  $BUILD_DIR',
                       'Running pretex (be patient)...'))
env.AddPostAction(pretex, 'cp $BUILD_DIR/index.html $BUILD_DIR/contents.html')
env.AddPostAction(pretex,
                  ['rm -rf $BUILD_DIR/figure-images',
                   'mkdir $BUILD_DIR/figure-images',
                   '[ "$$(echo $PRETEX_CACHE/*.png)" == $PRETEX_CACHE/"*.png" ]'
                   '  || cp $PRETEX_CACHE/*.png $BUILD_DIR/figure-images'])

# Build pdf
if env['BUILD_PDF']:
    env['LATEX_DIR'] = os.path.join(env['CACHE_DIR'], 'build-pdf')
    env['ENV']['TEXINPUTS'] = ".:" + env['LATEX_DIR'] + "/style:"
    index_tex = \
        env.Command('$LATEX_DIR/index.tex',
                    ['xsl/mathbook-latex.xsl', 'ila.xml'],
                    Action('xsltproc -o $LATEX_DIR/ --xinclude $SOURCES',
                           'Generating master LaTeX file'))
    env.Depends(index_tex, xml_sources)
    env.AddPreAction(index_tex,
                     ['rm -rf $LATEX_DIR',
                      'mkdir -p $LATEX_DIR',
                      'cp -r $BASE_DIR/src/latex $LATEX_DIR/style',
                      'cp -r $BASE_DIR/src/figure-images $LATEX_DIR/figure-images',
                      'cp -r $BASE_DIR/static/images $LATEX_DIR/images'])
    env.AddPostAction(index_tex, 'mv $LATEX_DIR/contents.tex $LATEX_DIR/index.tex')
    latex_cmd = 'cd $LATEX_DIR && pdflatex -interaction=nonstopmode "\\input{index}"'
    index_pdf = \
        env.Command('$LATEX_DIR/index.pdf',
                    index_tex,
                    Action([latex_cmd, latex_cmd, latex_cmd],
                           'Compiling PDF version'))
    dep = env.Command('$BUILD_DIR/$PDF_FILE', index_pdf,
                      Copy('$TARGET', '$SOURCE'))
    env.Depends('build-all', dep)
